---
title: "Visualizing geospatial data in R"
author: "Rick Dean"
format: 
  html:
    toc: false
    toc-depth: 4
    toc-location: "right"
    number-sections: true
    number-offset: 0
    self-contained: true
    smooth-scroll: true
    code-fold: true
    code-block-bg: "#f1f3f5"
    code-block-border-left: "#31BAE9"
    code-overflow: wrap
    tbl-cap-location: "bottom"
    fig-width: 12
    fig-height: 6
    fig-align: "center"
    fig-cap-location: "bottom"
    css: ../../style.css
    link-external-newwindow: true
    abstract-title: "Abstract"
    abstract: "The following R script was inspired by an article [Visualizing geospatial data in R](https://www.r-bloggers.com/2020/12/visualizing-geospatial-data-in-r-part-2-making-maps-with-ggplot2/) posted November 24, 2020 by Nathaniel Schmucker in R bloggers. This is part 2 of a 3 part series."
---

# Part 2: Making maps with ggplot2

:::topic
Load the Required R Packages.
:::

```{r}
#| warning: false
#| message: false

library(here)
library(data.table)
library(magrittr)
library(ggplot2)
library(sf)
library(RspatialPkg)
```

## The data

:::topic
Read in the Philadelphia neighborhood data.
:::

```{r}
neighborhoods_file_path <- file.path(here(), "data", "Neighborhoods_Philadelphia.geojson")

neighborhoods_raw_sf <- sf::read_sf(neighborhoods_file_path)
sf::st_crs(neighborhoods_raw_sf) = 4326
head(neighborhoods_raw_sf)
```

```{r}
trees_file_path <- file.path(here(), "data", "PPR_Tree_Inventory_2021.csv")
trees_raw_df <- sf::read_sf(trees_file_path)

trees_raw_sf <- sf::st_as_sf(trees_raw_df, coords = c("X","Y"))
sf::st_crs(trees_raw_sf) = 4326
head(trees_raw_sf)
```

:::topic
Clean the data files.
:::

Rename in `neighborhoods_raw_sf`; add "Area" column:

```{r}
neighborhoods_raw_sf <- data.table::as.data.table(neighborhoods_raw_sf) %>% 
  data.table::setnames(., old = c("cartodb_id","mapname"), new = c("Neighborhood_ID","Label")) %>% 
  .[, Area := shape_area/43560] %>% 
  sf::st_as_sf(.)
```

Rename in `trees_raw_sf`:

```{r}
trees_raw_sf <- data.table::as.data.table(trees_raw_sf) %>% 
  data.table::setnames(., old = "OBJECTID", new = "Tree_ID") %>% 
  sf::st_as_sf(.)
```

## Your first map

Map the two simple features.
```{r}
#| fig-cap: Neighborhoods around Philadelphia, PA with trees

neigh_trees_plot <- RspatialPkg::get_geom_sf(
  sf = neighborhoods_raw_sf,
  sf_fill = "#d3d3d3"
) +
  RspatialPkg::get_geom_sf(
    sf = trees_raw_sf,
    sf_color = "#74b560",
    adding = T
  )
neigh_trees_plot
```
## Zoom in on a region of interest

> By default, ggplot2 will zoom out so that all of the mapping objects are in the image. Suppose, however, that we are interested in a smaller region of the map: Center City Philadelphia.

> We can use `ggplot2::coord_sf()` to specify the coordinates to display. By default, `geom_sf()` calls `coord_sf()` in the background, but by explicitly calling it ourselves, we can override the default parameters. Below, we will specify our latitude and longitude, and set `expand = FALSE`. By default, expand is true, which puts a small buffer around the coordinates we specify. It’s an aesthetic choice.

> If you recall from Part 1 of this series, the CRS is the ellipsoid and datum used to reference points on the globe. ggplot2 will take the first CRS provided (in this case, in our neighborhoods dataset) and ensure that all subsequent layers use the same CRS. It automatically converts any mismatched CRSs to the first one provided. Using `coord_sf()`, we have options to change the CRS and the datum. Changing the datum won’t affect plotting, but will affect where graticules (latitude/longitude lines) are drawn if you choose to include them. By default, ggplot2 draws graticules using WGS 84 (EPSG: 4326), which happens to be the CRS of our two datasets. If we had needed to, we could have changed to NAD 83 (EPSG: 4269) using datum = sf::st_crs(4269).

```{r}
#| fig-cap: Zoomed neighborhoods around Philadelphia, PA with trees

neigh_trees_plot <- neigh_trees_plot +
  ggplot2::coord_sf(
    xlim = c(-75.185, -75.13),
    ylim = c(39.93, 39.96),
    expand = F
  )
neigh_trees_plot
```

## Add labels for clearer communication

```{r}
#| warning: false
#| message: false
#| fig-cap: Neighborhoods around Philadelphia, PA with labels and trees.

neigh_trees_plot <- neigh_trees_plot +
  RspatialPkg::get_geom_sf(
    sf = neighborhoods_raw_sf,
    aes_text = "Label",
    text_fontface = "bold",
    text_check_overlap = T,
    adding = T
  )
neigh_trees_plot
```

## Add highlights and annotations

> I want to highlight and annotate my favorite tree. Since the highlight rule needs to be determined tree-by-tree, we need to adjust our simple features object and add an appropriate aesthetic call to our plot. First we adjust our simple features object by adding columns for the color group and the label text. Then, we adjust our plot by including aes(color = Color) to define color groups and simultaneously adding `scale_color_manual()` to specify the colors we want for each group. At the same time, we optionally set `show.legend = FALSE` to hide the legend. We also add the label text using `geom_sf_label()` using the aes(label = Label) to specify the text and other parameters to adjust how it appears on the plot.

1. Add "Color" and "Label" columns to `trees_raw_sf`:

```{r}
trees_highlight_sf <- data.table::as.data.table(trees_raw_sf) %>% 
  .[, `:=`(
    Color = ifelse(Tree_ID == 39547, 1, 0),
    Label = ifelse(Tree_ID == 39547, "My favorite", "")
  )] %>% 
  .[, Color := as.factor(Color)] %>% 
  sf::st_as_sf(.)
```

2. Re-map with the newly defined columns for `trees_raw_sf`:

```{r}
#| warning: false
#| message: false
#| fig-cap: Neighborhoods around Philadelphia, PA with annotation and trees

RspatialPkg::get_geom_sf(
  sf = neighborhoods_raw_sf,
  sf_fill = "#d3d3d3",
  show_legend = F
) +
  RspatialPkg::get_geom_sf(
    sf = trees_highlight_sf,
    aes_color = "Color",
    own_scale = T,
    sf_size = 1.5,
    sf_shape = 20,
    adding = T
  ) +
  RspatialPkg::get_geom_sf(
    sf = neighborhoods_raw_sf,
    aes_text = "Label",
    text_fontface = "bold",
    text_check_overlap = T,
    adding = T
  ) +
  RspatialPkg::get_geom_sf(
    sf = trees_highlight_sf,
    aes_text = "Label",
    text_color = "#cb7123",
    text_fontface = "bold",
    text_size = 2.0,
    text_nudge_y = -0.0005,
    adding = T
  ) +
  ggplot2::coord_sf(
    xlim = c(-75.18, -75.10),
    ylim = c(39.95, 40.00),
    expand = F
  ) +
  ggplot2::scale_color_manual(values = c("#74b560", "#cb7123"))
```

## Choropleths in ggplot2

1. Join `neighborhoods_raw_sf` and `trees_raw_sf`via `sf::st_join()`:

```{r}
neigh_tree_join_sf <- sf::st_join(neighborhoods_raw_sf, trees_raw_sf)
```

2. Convert the join to a data.table, group, and create "Density" variable:
```{r}
neighborhoods_raw_dt <- data.table::as.data.table(neighborhoods_raw_sf)
count_density_sf <- data.table::as.data.table(neigh_tree_join_sf) %>%
  .[, .N, by = .(Neighborhood_ID, Label, Area)] %>%
  .[, Density := N/Area] %>% 
  neighborhoods_raw_dt[., on = c("Label", "Label")] %>% 
  sf::st_as_sf(.)
```

3. Map `count_density_sf`:

```{r}
#| fig-cap: Neighborhoods around Philadelphia, PA with trees per acre

count_density_plot <- RspatialPkg::get_geom_sf(
  sf = count_density_sf,
  aes_fill = "Density",
  own_scale = T,
  title = "The Urban Forest of Philadelphia",
  subtitle = "Number of trees per acre",
  hide_x_tics = T,
  hide_y_tics = T
) +
  ggplot2::labs(
    fill = "Trees per acre"
  ) +
  ggplot2::scale_fill_viridis_c(alpha = 0.75)
count_density_plot
```

This concludes notes on Part 2 of "Visualizing geospatial data in R".
